!function(e){if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define(e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.kmeans=e()}}(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){exports.findAverageMeanSeparation=function(means){var sum=0,count=0;var l=means.length;for(var i=0;i<l-1;i++){for(var j=i+1;j<l;j++){sum+=exports.distance(means[i],means[j]);count++}}return sum/count};exports.findAverageDistancePointToMean=function(points,means,assignments){if(points.length!=assignments.length){throw"points and assignments arrays must be of same dimension"}var sum=0;var count=points.length;for(var i=0;i<count;i++){var mean=means[assignments[i]];sum+=exports.distance(points[i],mean)}return sum/count};exports.countPointsPerMean=function(assignments){var counts={};for(var i=0,l=assignments.length;i<l;i++){var a=assignments[i];if(!counts[a]){counts[a]=1}else{counts[a]++}}return counts};exports.algorithm=function(points,k,progress){var means=[];for(var i=0;i<k;i++){var index=Math.floor(Math.random()*points.length);var point=points[index];means.push(point.slice(0))}var oldAssignments,assignments=exports.assignPointsToMeans(points,means);var n=0,changeCount;do{exports.moveMeansToCenters(points,assignments,means);oldAssignments=assignments;assignments=exports.assignPointsToMeans(points,means);changeCount=exports.countChangedAssignments(assignments,oldAssignments);if(progress){progress(changeCount,n)}n++}while(changeCount>0);return{means:means,assignments:assignments,steps:n}};exports.moveMeansToCenters=function(points,assignments,means){if(points.length!=assignments.length){throw"points and assignments arrays must be of same dimension"}for(var i=0,l=means.length;i<l;i++){var assignedPoints=[];for(var j=0,m=assignments.length;j<m;j++){if(assignments[j]==i){assignedPoints.push(points[j])}}if(assignedPoints.length>0)means[i]=exports.averagePosition(assignedPoints)}return means};exports.averagePosition=function(points){var sums=points[0].slice(0);var pointCount=points.length;for(var i=1;i<pointCount;i++){var point=points[i];for(var j=0,m=point.length;j<m;j++){sums[j]+=point[j]}}for(var k=0,n=sums.length;k<n;k++){sums[k]/=pointCount}return sums};exports.countChangedAssignments=function(oldAssignments,newAssignments){if(oldAssignments.length!=newAssignments.length){throw"old and new assignment arrays must be of same dimension"}var count=0;for(var i=0,l=oldAssignments.length;i<l;i++){if(oldAssignments[i]!=newAssignments[i]){count++}}return count};exports.assignPointsToMeans=function(points,means){var assignments=[];for(var i=0,l=points.length;i<l;i++){assignments.push(exports.findClosestMean(points[i],means))}return assignments};exports.findClosestMean=function(point,means){var distances=[];for(var i=0,l=means.length;i<l;i++){distances.push(exports.distance(point,means[i]))}return exports.findIndexOfMinimum(distances)};exports.findIndexOfMinimum=function(array){var min=array[0],index=0;for(i=1,l=array.length;i<l;i++){if(array[i]<min){index=i;min=array[i]}}return index};exports.generateRandomPoints=function(ranges,n){var rcp=require("../lib/randomClusterPoints");rcp.init(ranges,4,1);var points=[];for(var i=0;i<n;i++){var mean=rcp.generatePoint();points.push(mean)}return points};exports.findRanges=function(dataPoints){var firstPoint=dataPoints[0];var pointCount=dataPoints.length;var dimensions=firstPoint.length;var ranges=[];for(var d=0;d<dimensions;d++){ranges[d]=[firstPoint[d],firstPoint[d]]}for(var pointIndex=1;pointIndex<pointCount;pointIndex++){var testPoint=dataPoints[pointIndex];for(var d=0;d<dimensions;d++){if(testPoint[d]<ranges[d][0]){ranges[d][0]=testPoint[d]}if(testPoint[d]>ranges[d][1]){ranges[d][1]=testPoint[d]}}}return ranges};exports.distance=function(point1,point2){return Math.sqrt(exports.squaredError(point1,point2))};exports.squaredError=function(point1,point2){if(point1.length!=point2.length){throw"point1 and point2 must be of same dimension"}var dim=point1.length;var sum=0;for(var i=0;i<dim;i++){sum+=(point1[i]-point2[i])*(point1[i]-point2[i])}return sum};exports.sumSquaredError=function(points,means,assignments){if(points.length!=assignments.length){throw"points and assignments arrays must be of same dimension"}var sum=0;var count=points.length;for(var i=0;i<count;i++){var mean=means[assignments[i]];sum+=exports.squaredError(points[i],mean)}return sum}},{"../lib/randomClusterPoints":2}],2:[function(require,module,exports){function genrand(bmin,bmax,rmin,rmax,n){var i,u,sum;do{sum=0;for(i=0;i<n;i++){sum+=bmin+Math.random()*Number.MAX_VALUE%(bmax-bmin)}if(sum<0)sum-=n-1;u=sum/n}while(!(rmin<=u&&u<rmax));return u}var clusterCurveDescriptions;exports.init=function(ranges,count,_maxClusterPortion){var maxClusterPortion=_maxClusterPortion||1;clusterCurveDescriptions=[];for(var i=0;i<count;i++){var ccd=generateClusterCurveDescriptions(ranges,maxClusterPortion);clusterCurveDescriptions.push(ccd)}return clusterCurveDescriptions};function generateClusterCurveDescriptions(ranges,maxClusterPortion){curveDescriptions=[];for(var i=0,l=ranges.length;i<l;i++){var range=ranges[i];var rangeSize=range[1]-range[0];var center=range[0]+Math.random()*rangeSize;var width=rangeSize/2+Math.random()*rangeSize/2*maxClusterPortion;var curveDescription={bmin:center-width/2,bmax:center+width/2,rmin:center-width/2,rmax:center+width/2,height:3};curveDescriptions.push(curveDescription)}return curveDescriptions}function generatePoint(clusterIndex){if(!clusterCurveDescriptions){return null}if(!clusterIndex){clusterIndex=Math.floor(Math.random()*clusterCurveDescriptions.length)}var curveDescriptions=clusterCurveDescriptions[clusterIndex];var point=[];for(var i=0,l=curveDescriptions.length;i<l;i++){var cd=curveDescriptions[i];point.push(genrand(cd.bmin,cd.bmax,cd.rmin,cd.rmax,cd.height))}console.log(point);return point}exports.generateClusterCurveDescriptions=generateClusterCurveDescriptions;exports.genrand=genrand;exports.generatePoint=generatePoint},{}]},{},[1])(1)});